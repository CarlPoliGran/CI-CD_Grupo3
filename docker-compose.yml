services:
  # myfacturacion es el contenedor para backend
  myfacturacion:
    #hacer el build desde el directorio raiz, en esta ruta se encuentra el Dockerfile del backend
    build: .
    #Mapear el puerto 5000 del host con el puerto 5000 del contenedor 
    ports:
      - "5000:5000"
    # Se especifica el orden de ejecución, la ejecución del app flask depende de que ya
    # esta arriba el contenedor de mongo
    depends_on:
      - mongo
    #Variables de entorno, para conexion con la base de datos
    environment:
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - MONGO_USER=carlos
      - MONGO_PASSWORD=123
      - MONGO_DB=facturacion_db
    # Especificamos que el contenedor se encuentra en la red docker "red-poli"
    networks:
      - red-poli
    #esoecificamos un volumen del contenedor en el host
    volumes:
      - ./backend:/app/backend
  
  # portal es el contenedor para frontend
  portal:
    #Especificamos la ruta donde se encuentra Dockerfile para la contruccion del front
    build: ./frontend
    ports:
      - "80:80"
    networks:
      - red-poli
    volumes:
      - ./frontend:/app/frontend

  # contenedor de mongo para la base de datos
  mongo:
    #usamos directamente la imagen de mongo
    image: mongo
    #especificamos el nombre dle contenedor de mongo
    container_name: dbfacturacion
    #Variables de entorno para establecer una base de datos y un usuario  de privilegios admin
    environment:
      MONGO_INITDB_ROOT_USERNAME: carlos
      MONGO_INITDB_ROOT_PASSWORD: 123
      MONGO_INITDB_DATABASE: facturacion_db
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - red-poli

#Creamos la red interna docker "red-poli"
networks:
  red-poli:
    #Especificar el modo de operación de la red
    driver: bridge

# definimos el volume para el contendor mongo
volumes:
  mongo_data: